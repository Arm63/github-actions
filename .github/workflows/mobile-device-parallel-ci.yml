name: Mobile Device Testing (Parallel)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_ios:
        description: 'Run iOS tests'
        required: false
        default: 'true'
        type: boolean
      run_android:
        description: 'Run Android tests'
        required: false
        default: 'true'
        type: boolean

jobs:
  parallel-mobile-tests:
    runs-on: self-hosted
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Environment
      run: |
        echo "📱 Setting up parallel mobile testing environment..."
        
        # Kill any existing Appium processes
        pkill -f appium || true
        sleep 3
        
        # Setup Python
        export PATH="$HOME/.local/bin:$PATH"
        poetry install --no-root
        
    - name: Check Device Connections
      run: |
        echo "🔍 Checking device connections..."
        
        # Check iOS device
        if [ "${{ github.event.inputs.run_ios }}" != "false" ]; then
          if command -v idevice_id &> /dev/null; then
            DEVICE_COUNT=$(idevice_id -l 2>/dev/null | wc -l)
            if [ "$DEVICE_COUNT" -gt 0 ]; then
              DEVICE_UDID=$(idevice_id -l | head -1)
              echo "✅ iOS device connected: $DEVICE_UDID"
              echo "IOS_DEVICE_AVAILABLE=true" >> $GITHUB_ENV
              echo "DEVICE_UDID=$DEVICE_UDID" >> $GITHUB_ENV
            else
              echo "⚠️ No iOS device connected - iOS tests will be skipped"
              echo "IOS_DEVICE_AVAILABLE=false" >> $GITHUB_ENV
            fi
          else
            echo "⚠️ libimobiledevice not installed - iOS tests will be skipped"
            echo "IOS_DEVICE_AVAILABLE=false" >> $GITHUB_ENV
          fi
        else
          echo "📱 iOS tests disabled"
          echo "IOS_DEVICE_AVAILABLE=false" >> $GITHUB_ENV
        fi
        
        # Check Android device  
        if [ "${{ github.event.inputs.run_android }}" != "false" ]; then
          if command -v adb &> /dev/null; then
            DEVICE_COUNT=$(adb devices | grep -v "List of devices" | grep -c "device")
            if [ "$DEVICE_COUNT" -gt 0 ]; then
              ANDROID_DEVICE_UDID=$(adb devices | grep -v "List of devices" | grep "device" | head -1 | awk '{print $1}')
              echo "✅ Android device connected: $ANDROID_DEVICE_UDID"
              echo "ANDROID_DEVICE_AVAILABLE=true" >> $GITHUB_ENV
              echo "ANDROID_DEVICE_UDID=$ANDROID_DEVICE_UDID" >> $GITHUB_ENV
            else
              echo "⚠️ No Android device connected - Android tests will be skipped"
              echo "ANDROID_DEVICE_AVAILABLE=false" >> $GITHUB_ENV
            fi
          else
            echo "⚠️ ADB not installed - Android tests will be skipped"
            echo "ANDROID_DEVICE_AVAILABLE=false" >> $GITHUB_ENV
          fi
        else
          echo "🤖 Android tests disabled"
          echo "ANDROID_DEVICE_AVAILABLE=false" >> $GITHUB_ENV
        fi
        
    - name: Start Appium Servers
      run: |
        echo "🚀 Starting Appium servers..."
        
        # Start iOS Appium server on port 4723
        if [ "$IOS_DEVICE_AVAILABLE" == "true" ]; then
          echo "Starting iOS Appium server (port 4723)..."
          appium --log appium-ios.log --log-level info --port 4723 &
          IOS_APPIUM_PID=$!
          echo "IOS_APPIUM_PID=$IOS_APPIUM_PID" >> $GITHUB_ENV
          echo "iOS Appium PID: $IOS_APPIUM_PID"
        fi
        
        # Start Android Appium server on port 4724
        if [ "$ANDROID_DEVICE_AVAILABLE" == "true" ]; then
          echo "Starting Android Appium server (port 4724)..."
          appium --log appium-android.log --log-level info --port 4724 &
          ANDROID_APPIUM_PID=$!
          echo "ANDROID_APPIUM_PID=$ANDROID_APPIUM_PID" >> $GITHUB_ENV
          echo "Android Appium PID: $ANDROID_APPIUM_PID"
        fi
        
        # Wait for servers to start
        sleep 10
        
        # Verify servers are running
        if [ "$IOS_DEVICE_AVAILABLE" == "true" ]; then
          if curl -s http://localhost:4723/status | grep -q '"ready":true'; then
            echo "✅ iOS Appium server ready"
          else
            echo "❌ iOS Appium server failed to start"
            exit 1
          fi
        fi
        
        if [ "$ANDROID_DEVICE_AVAILABLE" == "true" ]; then
          if curl -s http://localhost:4724/status | grep -q '"ready":true'; then
            echo "✅ Android Appium server ready"
          else
            echo "❌ Android Appium server failed to start"
            exit 1
          fi
        fi
        
    - name: Run Tests in Parallel
      run: |
        echo "🧪 Starting parallel test execution..."
        export PATH="$HOME/.local/bin:$PATH"
        
        # Create test result files
        touch ios_test_result.txt
        touch android_test_result.txt
        
        # Function to run iOS tests
        run_ios_tests() {
          echo "🍎 Starting iOS tests..." | tee -a ios_test_result.txt
          
          export APPIUM_PORT=4723
          export DEVICE_UDID=$DEVICE_UDID
          export DEVICE_NAME="iPhone SE"
          export PLATFORM_VERSION="17.2"
          export TEAM_ID="2FHJSTZ57U"
          
          if poetry run pytest tests/test_login_ios.py::TestLiveboardiOS::test_click_composable_ios -v -s 2>&1 | tee -a ios_test_result.txt; then
            echo "✅ iOS tests PASSED" | tee -a ios_test_result.txt
            echo "IOS_TEST_RESULT=success" >> $GITHUB_ENV
          else
            echo "❌ iOS tests FAILED" | tee -a ios_test_result.txt
            echo "IOS_TEST_RESULT=failure" >> $GITHUB_ENV
          fi
        }
        
        # Function to run Android tests
        run_android_tests() {
          echo "🤖 Starting Android tests..." | tee -a android_test_result.txt
          
          export APPIUM_PORT=4724
          export ANDROID_DEVICE_UDID=$ANDROID_DEVICE_UDID
          export ANDROID_DEVICE_NAME="Android Device"
          export ANDROID_PLATFORM_VERSION="11.0"
          
          if poetry run pytest tests/test_login_android.py::test_click_login_button_only tests/test_login_android.py::test_click_composable -v -s 2>&1 | tee -a android_test_result.txt; then
            echo "✅ Android tests PASSED" | tee -a android_test_result.txt
            echo "ANDROID_TEST_RESULT=success" >> $GITHUB_ENV
          else
            echo "❌ Android tests FAILED" | tee -a android_test_result.txt
            echo "ANDROID_TEST_RESULT=failure" >> $GITHUB_ENV
          fi
        }
        
        # Start tests in parallel
        if [ "$IOS_DEVICE_AVAILABLE" == "true" ]; then
          run_ios_tests &
          IOS_TEST_PID=$!
          echo "iOS tests started with PID: $IOS_TEST_PID"
        fi
        
        if [ "$ANDROID_DEVICE_AVAILABLE" == "true" ]; then
          run_android_tests &
          ANDROID_TEST_PID=$!
          echo "Android tests started with PID: $ANDROID_TEST_PID"
        fi
        
        # Wait for both test processes to complete
        if [ "$IOS_DEVICE_AVAILABLE" == "true" ]; then
          echo "⏳ Waiting for iOS tests to complete..."
          wait $IOS_TEST_PID
          echo "🍎 iOS tests completed"
        fi
        
        if [ "$ANDROID_DEVICE_AVAILABLE" == "true" ]; then
          echo "⏳ Waiting for Android tests to complete..."
          wait $ANDROID_TEST_PID
          echo "🤖 Android tests completed"
        fi
        
        echo "✨ All parallel tests completed!"
        
    - name: Display Test Results
      if: always()
      run: |
        echo "📊 Parallel Test Results Summary"
        echo "================================="
        
        if [ "$IOS_DEVICE_AVAILABLE" == "true" ]; then
          echo ""
          echo "🍎 iOS Test Results:"
          echo "-------------------"
          cat ios_test_result.txt || echo "No iOS results found"
        fi
        
        if [ "$ANDROID_DEVICE_AVAILABLE" == "true" ]; then
          echo ""
          echo "🤖 Android Test Results:"
          echo "------------------------"
          cat android_test_result.txt || echo "No Android results found"
        fi
        
        echo ""
        echo "📋 Final Status:"
        echo "================"
        
        OVERALL_RESULT="success"
        
        if [ "$IOS_DEVICE_AVAILABLE" == "true" ]; then
          echo "iOS: ${IOS_TEST_RESULT:-unknown}"
          if [ "${IOS_TEST_RESULT:-failure}" != "success" ]; then
            OVERALL_RESULT="failure"
          fi
        else
          echo "iOS: skipped"
        fi
        
        if [ "$ANDROID_DEVICE_AVAILABLE" == "true" ]; then
          echo "Android: ${ANDROID_TEST_RESULT:-unknown}"
          if [ "${ANDROID_TEST_RESULT:-failure}" != "success" ]; then
            OVERALL_RESULT="failure"
          fi
        else
          echo "Android: skipped"
        fi
        
        if [ "$OVERALL_RESULT" == "success" ]; then
          echo ""
          echo "🎉 All tests passed successfully!"
        else
          echo ""
          echo "⚠️ Some tests failed!"
          exit 1
        fi
        
    - name: Stop Appium Servers
      if: always()
      run: |
        echo "🛑 Stopping Appium servers..."
        
        # Stop iOS Appium server
        if [ ! -z "$IOS_APPIUM_PID" ]; then
          kill $IOS_APPIUM_PID 2>/dev/null || true
          echo "Stopped iOS Appium server (PID: $IOS_APPIUM_PID)"
        fi
        
        # Stop Android Appium server
        if [ ! -z "$ANDROID_APPIUM_PID" ]; then
          kill $ANDROID_APPIUM_PID 2>/dev/null || true
          echo "Stopped Android Appium server (PID: $ANDROID_APPIUM_PID)"
        fi
        
        # Kill any remaining Appium processes
        pkill -f "appium.*4723" 2>/dev/null || true
        pkill -f "appium.*4724" 2>/dev/null || true
        
        echo "✅ All Appium servers stopped"
        
    - name: Upload Test Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: parallel-mobile-test-results
        path: |
          *.png
          appium-ios.log
          appium-android.log
          ios_test_result.txt
          android_test_result.txt 