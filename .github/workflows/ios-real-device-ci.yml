name: iOS Real Device Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      device_name:
        description: 'Device name (e.g., iPhone SE)'
        required: false
        default: 'iPhone SE'
      platform_version:
        description: 'iOS version (e.g., 17.2)'
        required: false
        default: '17.2'
      team_id:
        description: 'Apple Team ID'
        required: false
        default: '2FHJSTZ57U'

jobs:
  ios-real-device-test:
    runs-on: self-hosted  # Requires your macOS machine as runner
    timeout-minutes: 45
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check iOS device connection
      run: |
        if ! command -v idevice_id &> /dev/null; then
          echo "‚ùå libimobiledevice not installed"
          exit 1
        fi
        
        DEVICE_COUNT=$(idevice_id -l | wc -l)
        if [ "$DEVICE_COUNT" -eq 0 ]; then
          echo "‚ùå No iOS device connected via USB"
          echo "üí° Please connect your iPhone and trust the computer"
          exit 1
        fi
        
        echo "‚úÖ iOS device connected"
        idevice_id -l
        
    - name: Setup Python environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Poetry
      run: |
        if ! command -v poetry &> /dev/null; then
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        fi
        
    - name: Install Python dependencies
      run: |
        # Copy iOS project files from archive
        cp -r archive/ios-testing-project/* .
        
        # Install dependencies
        poetry install
        
    - name: Check Appium setup
      run: |
        if ! command -v appium &> /dev/null; then
          echo "‚ùå Appium not installed"
          echo "üí° Run complete setup first"
          exit 1
        fi
        
        echo "‚úÖ Appium version: $(appium --version)"
        
        # Check XCUITest driver
        if ! appium driver list | grep -q xcuitest; then
          echo "Installing XCUITest driver..."
          appium driver install xcuitest
        fi
        
    - name: Start Appium server
      run: |
        # Kill any existing Appium processes
        pkill -f appium || true
        sleep 2
        
        # Start Appium in background
        appium --log appium.log --log-level debug &
        APPIUM_PID=$!
        echo "APPIUM_PID=$APPIUM_PID" >> $GITHUB_ENV
        
        # Wait for Appium to start
        sleep 5
        
        # Check if Appium started
        if ! kill -0 $APPIUM_PID 2>/dev/null; then
          echo "‚ùå Failed to start Appium server"
          exit 1
        fi
        
        echo "‚úÖ Appium server started (PID: $APPIUM_PID)"
        
    - name: Run iOS real device tests
      env:
        DEVICE_NAME: ${{ github.event.inputs.device_name || 'iPhone SE' }}
        PLATFORM_VERSION: ${{ github.event.inputs.platform_version || '17.2' }}
        TEAM_ID: ${{ github.event.inputs.team_id || '2FHJSTZ57U' }}
      run: |
        # Get device UDID
        DEVICE_UDID=$(idevice_id -l | head -1)
        export DEVICE_UDID
        
        echo "üß™ Running iOS tests with configuration:"
        echo "Device: $DEVICE_NAME"
        echo "UDID: $DEVICE_UDID"
        echo "iOS: $PLATFORM_VERSION"
        echo "Team ID: $TEAM_ID"
        
        # Create dynamic test configuration
        # (This would use your one_command_ios_test.sh logic)
        
        # Run simple connection test
        poetry run python test_ios_real_device.py
        
        # Run UI login test
        poetry run pytest tests/test_login_ios.py::test_click_composable_ios -v
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ios-test-results
        path: |
          *.png
          appium.log
          test-results/
          
    - name: Stop Appium server
      if: always()
      run: |
        if [ ! -z "$APPIUM_PID" ]; then
          kill $APPIUM_PID || true
        fi
        pkill -f appium || true 