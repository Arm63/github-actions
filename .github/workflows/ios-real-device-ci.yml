name: iOS Real Device Testing

on:
  workflow_dispatch:
    inputs:
      device_name:
        description: 'Device name (e.g., iPhone SE)'
        required: false
        default: 'iPhone SE'
      platform_version:
        description: 'iOS version (e.g., 17.2)'
        required: false
        default: '17.2'
      team_id:
        description: 'Apple Team ID'
        required: false
        default: '2FHJSTZ57U'

jobs:
  ios-real-device-test:
    runs-on: self-hosted  # Requires your macOS machine as runner
    timeout-minutes: 45
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check iOS device connection
      run: |
        echo "üîç Checking iOS device setup..."
        
        # Run debug script if available
        if [ -f "debug_device_access.sh" ]; then
          echo "üêõ Running device access debug script..."
          ./debug_device_access.sh
          echo "üêõ Debug script completed"
          echo "----------------------------------------"
        fi
        
        # Check if libimobiledevice is installed
        if ! command -v idevice_id &> /dev/null; then
          echo "‚ùå libimobiledevice not installed"
          echo "üí° Install with: brew install libimobiledevice"
          exit 1
        fi
        
        echo "‚úÖ libimobiledevice is installed"
        
        # Ensure PATH includes homebrew for consistent tool access
        export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"
        
        # List all connected devices with detailed info
        echo "üì± Checking connected devices..."
        idevice_id -l || true
        
        # Get device count
        DEVICE_COUNT=$(idevice_id -l 2>/dev/null | wc -l)
        echo "Found $DEVICE_COUNT device(s)"
        
        if [ "$DEVICE_COUNT" -eq 0 ]; then
          echo "‚ùå No iOS device connected via USB"
          echo "üí° Please:"
          echo "   1. Connect your iPhone via USB cable"
          echo "   2. Trust the computer on your device"
          echo "   3. Make sure the device is unlocked"
          echo "   4. Check cable connection"
          
          # Additional debugging
          echo "üîç USB debugging info:"
          system_profiler SPUSBDataType | grep -A 10 -B 2 "iPhone\|iPad" || echo "No iOS devices found in USB"
          
          # Try to fix common issues
          echo "üîß Attempting to fix device connection issues..."
          
          # Ensure PATH includes homebrew
          export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"
          
          # Try to re-establish device pairing
          echo "Attempting device re-pairing..."
          idevicepair pair 2>&1 || echo "Pairing failed or not needed"
          
          # Wait a moment and try again
          sleep 2
          DEVICE_COUNT_RETRY=$(idevice_id -l 2>/dev/null | wc -l)
          if [ "$DEVICE_COUNT_RETRY" -eq 0 ]; then
            echo "‚ùå Still no device found after retry"
            exit 1
          else
            echo "‚úÖ Device found after retry!"
          fi
        fi
        
        # Get device info
        DEVICE_UDID=$(idevice_id -l | head -1)
        echo "‚úÖ iOS device connected: $DEVICE_UDID"
        
        # Check device info
        echo "üìã Device information:"
        ideviceinfo -u "$DEVICE_UDID" -k DeviceName || echo "Could not get device name"
        ideviceinfo -u "$DEVICE_UDID" -k ProductVersion || echo "Could not get iOS version"
        ideviceinfo -u "$DEVICE_UDID" -k ProductType || echo "Could not get device type"
        
    - name: Setup Python environment
      run: |
        echo "Using system Python:"
        python3 --version
        which python3
        
        # Ensure pip is available
        python3 -m ensurepip --upgrade || true
        
    - name: Install Poetry
      run: |
        if ! command -v poetry &> /dev/null; then
          echo "Installing Poetry..."
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        else
          echo "Poetry already installed: $(poetry --version)"
        fi
        
    - name: Install Python dependencies
      run: |
        # Check if archive exists
        if [ -d "archive/ios-testing-project" ]; then
          echo "Copying iOS project files from archive..."
          cp -r archive/ios-testing-project/* .
        else
          echo "Archive not found, using existing files..."
        fi
        
        # Ensure PATH includes Poetry
        export PATH="$HOME/.local/bin:$PATH"
        
        # Install dependencies
        poetry install --no-root
        
    - name: Check Appium setup
      run: |
        if ! command -v appium &> /dev/null; then
          echo "‚ùå Appium not installed"
          echo "üí° Run complete setup first"
          exit 1
        fi
        
        echo "‚úÖ Appium version: $(appium --version)"
        
        # List available drivers
        echo "- Listing available drivers"
        appium driver list
        
        # Check XCUITest driver installation
        echo "Checking XCUITest driver..."
        
        # Save driver list to file and check
        appium driver list --installed > /tmp/drivers.txt 2>&1
        if grep -q "xcuitest" /tmp/drivers.txt; then
          XCUITEST_VERSION=$(grep "xcuitest" /tmp/drivers.txt | head -1)
          echo "‚úÖ XCUITest driver already installed: $XCUITEST_VERSION"
        else
          echo "Installing XCUITest driver..."
          appium driver install xcuitest
        fi
        
    - name: Start Appium server
      run: |
        # Kill any existing Appium processes
        pkill -f appium || true
        sleep 2
        
        # Start Appium in background
        appium --log appium.log --log-level debug &
        APPIUM_PID=$!
        echo "APPIUM_PID=$APPIUM_PID" >> $GITHUB_ENV
        
        # Wait for Appium to start
        sleep 5
        
        # Check if Appium started
        if ! kill -0 $APPIUM_PID 2>/dev/null; then
          echo "‚ùå Failed to start Appium server"
          exit 1
        fi
        
        echo "‚úÖ Appium server started (PID: $APPIUM_PID)"
        
    - name: Run iOS real device tests
      env:
        DEVICE_NAME: ${{ github.event.inputs.device_name || 'iPhone SE' }}
        PLATFORM_VERSION: ${{ github.event.inputs.platform_version || '17.2' }}
        TEAM_ID: ${{ github.event.inputs.team_id || '2FHJSTZ57U' }}
      run: |
        # Ensure PATH includes Poetry
        export PATH="$HOME/.local/bin:$PATH"
        
        # Double-check device connection before tests
        echo "üîç Re-checking device connection before tests..."
        DEVICE_UDID=$(idevice_id -l | head -1)
        if [ -z "$DEVICE_UDID" ]; then
          echo "‚ùå Device disconnected before tests!"
          echo "üí° Please ensure device stays connected and unlocked"
          exit 1
        fi
        
        export DEVICE_UDID
        
        echo "üß™ Running iOS tests with configuration:"
        echo "Device: $DEVICE_NAME"
        echo "UDID: $DEVICE_UDID"
        echo "iOS: $PLATFORM_VERSION"
        echo "Team ID: $TEAM_ID"
        
        # List available test files
        echo "üìÅ Available test files:"
        ls -la *.py || echo "No Python files in root"
        ls -la tests/*.py || echo "No test files in tests/"
        
        # Run simple test first
        if [ -f "test_ios_simple.py" ]; then
          echo "üöÄ Running simple iOS test..."
          echo "----------------------------------------"
          poetry run python test_ios_simple.py
          TEST_EXIT_CODE=$?
          echo "----------------------------------------"
          if [ $TEST_EXIT_CODE -eq 0 ]; then
            echo "‚úÖ Simple test passed!"
          else
            echo "‚ùå Simple test failed with exit code $TEST_EXIT_CODE"
            echo "üì∏ Checking for screenshots..."
            ls -la *.png || echo "No screenshots found"
          fi
        else
          echo "‚ö†Ô∏è test_ios_simple.py not found, skipping simple test"
        fi
        
        # Run comprehensive test
        if [ -f "tests/test_login_ios.py" ]; then
          echo "üß™ Running comprehensive iOS test..."
          echo "----------------------------------------"
          poetry run pytest tests/test_login_ios.py::TestLiveboardiOS::test_click_composable_ios -v -s
          PYTEST_EXIT_CODE=$?
          echo "----------------------------------------"
          if [ $PYTEST_EXIT_CODE -eq 0 ]; then
            echo "‚úÖ Comprehensive test passed!"
          else
            echo "‚ùå Comprehensive test failed with exit code $PYTEST_EXIT_CODE"
          fi
        else
          echo "‚ö†Ô∏è tests/test_login_ios.py not found, skipping comprehensive test"
        fi
        
        # Show final results
        echo "üìä Test Results Summary:"
        echo "- Simple test: ${TEST_EXIT_CODE:-'skipped'}"
        echo "- Comprehensive test: ${PYTEST_EXIT_CODE:-'skipped'}"
        
        # List all screenshots
        echo "üì∏ Screenshots generated:"
        ls -la *.png || echo "No screenshots found"
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ios-test-results
        path: |
          *.png
          appium.log
          test-results/
          
    - name: Stop Appium server
      if: always()
      run: |
        if [ ! -z "$APPIUM_PID" ]; then
          kill $APPIUM_PID || true
        fi
        pkill -f appium || true 