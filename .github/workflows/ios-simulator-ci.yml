name: iOS Simulator Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  ios-simulator-test:
    runs-on: macos-latest  # GitHub-hosted runner
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: List available simulators
      run: |
        echo "📱 Available iOS simulators:"
        xcrun simctl list devices available
        
    - name: Setup Node.js for Appium
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Appium
      run: |
        npm install -g appium
        appium driver install xcuitest
        
    - name: Setup Python environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Install Python dependencies
      run: |
        poetry install
        
    - name: Create simulator test configuration
      run: |
        # Create a simplified test for simulator
        cat > test_ios_simulator.py << 'EOF'
        import time
        from appium import webdriver
        from appium.options.ios.xcuitest.base import XCUITestOptions
        
        def test_ios_simulator():
            """Test iOS simulator with basic app"""
            
            options = XCUITestOptions()
            options.platform_name = 'iOS'
            options.device_name = 'iPhone 15'
            options.platform_version = '17.2'
            options.automation_name = 'XCUITest'
            options.bundle_id = 'com.apple.calculator'  # Built-in Calculator app
            options.no_reset = True
            options.auto_accept_alerts = True
            
            try:
                print("🧪 Starting iOS simulator test...")
                driver = webdriver.Remote('http://localhost:4723', options=options)
                
                print("✅ Successfully connected to iOS simulator!")
                
                # Take screenshot
                driver.save_screenshot("simulator_test.png")
                print("📸 Screenshot saved")
                
                # Basic interaction with Calculator
                time.sleep(2)
                
                driver.quit()
                print("✅ Simulator test completed!")
                return True
                
            except Exception as e:
                print(f"❌ Simulator test failed: {e}")
                return False
                
        if __name__ == "__main__":
            test_ios_simulator()
        EOF
        
    - name: Start iOS Simulator
      run: |
        # Boot iPhone 15 simulator
        SIMULATOR_ID=$(xcrun simctl create "Test iPhone" "iPhone 15" "iOS-17-2")
        echo "SIMULATOR_ID=$SIMULATOR_ID" >> $GITHUB_ENV
        
        xcrun simctl boot $SIMULATOR_ID
        
        # Wait for simulator to boot
        echo "⏳ Waiting for simulator to boot..."
        sleep 30
        
    - name: Start Appium server
      run: |
        appium --log appium.log --log-level debug &
        APPIUM_PID=$!
        echo "APPIUM_PID=$APPIUM_PID" >> $GITHUB_ENV
        
        # Wait for Appium to start
        sleep 10
        
        echo "✅ Appium server started"
        
    - name: Run iOS simulator tests
      run: |
        echo "🧪 Running iOS simulator tests..."
        poetry run python test_ios_simulator.py
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ios-simulator-results
        path: |
          *.png
          appium.log
          
    - name: Cleanup
      if: always()
      run: |
        # Stop Appium
        if [ ! -z "$APPIUM_PID" ]; then
          kill $APPIUM_PID || true
        fi
        
        # Shutdown simulator
        if [ ! -z "$SIMULATOR_ID" ]; then
          xcrun simctl shutdown $SIMULATOR_ID || true
          xcrun simctl delete $SIMULATOR_ID || true
        fi 